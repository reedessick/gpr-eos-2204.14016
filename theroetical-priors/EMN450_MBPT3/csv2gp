#!/usr/bin/env python3

"""a simple script to generate an Gaussian Process model based on the data in a CSV
"""
__author__ = "Reed Essick (reed.essick@gmail.com)"

#-------------------------------------------------

import os
import sys

import numpy as np
import h5py

import matplotlib
matplotlib.use("Agg")
from matplotlib import pyplot as plt

from argparse import ArgumentParser

#-------------------------------------------------

parser = ArgumentParser()

parser.add_argument('csv', nargs='+', type=str)

parser.add_argument('--pressurec2-range', nargs=2, type=float, default=(1e9, 1e13),
    help='the range of pressures retained when making the process')

parser.add_argument('--pressurec2-grid-range', nargs=2, type=float, default=(1e10, 1e17),
    help='defines the range of pressures used when constructing the grid over pressure')
parser.add_argument('--num-pressure-points', type=int, default=500,
    help='the number of points used when constructing the grid over pressure')

parser.add_argument('-S', '--scale', type=float, default=1.0)
parser.add_argument('-L', '--correlation-length', type=float, default=3.0)

parser.add_argument('--crust', type=str, required=True,
    help='a CSV of the crust EoS to which we will match the EFT band')
parser.add_argument('--crust-min-baryon-density', default=2.8e12, type=float,
    help='ignore the crust below this baryon density (specified in CGS). \
DEFAULT is 0.01 * saturation (2.8e12)')

parser.add_argument('--stitch-logic', default='switch', type=str,
    help='control the logic for how we stitch to the crust. Default is to "switch" to the crust when the \
sound speed matches the mean of the EFT prediction. Alternatively, we can "condition" a process based on the EFT \
data on the crust.')

parser.add_argument('--stitch-switch-delta-logpc2', default=2.0, type=float,
    help='controls how quickly we squash uncertainty around the crust near the stitching density')
parser.add_argument('--stitch-switch-pow', default=1.0, type=float,
    help='controls how we further squash uncertainty around the crust at the lowest densities')

parser.add_argument('--stitch-condition-sigma', default=1e-4, type=float,
    help='the white noise marginal variance used to model uncertainty in the crust')
parser.add_argument('--stitch-condition-correlation-length', default=0.25, type=float,
    help='the correlation length used when computing the correlations between crust and the EFT band')
parser.add_argument('--stitch-condition-squeeze-pressurec2', default=2e11, type=float,
    help='controls how quickly we squash uncertainty around the crust near the stitching density')
parser.add_argument('--stitch-condition-squeeze-pow', default=1.0, type=float,
    help='controls how we further squash uncertainty around the crust at the lowest densities')


parser.add_argument('--plot', default=False, action='store_true')
parser.add_argument('--num-draws', default=0, type=int)
parser.add_argument('--seed', default=None, type=int)

parser.add_argument('-o', '--output-dir', default='.', type=str)
parser.add_argument('-t', '--tag', default='', type=str)

parser.add_argument('-v', '--verbose', default=False, action='store_true')

args = parser.parse_args()

os.makedirs(args.output_dir, exist_ok=True)

tag = ('%05.2f_%07.3f'%(args.scale, args.correlation_length)).replace('.', 'd')

if args.tag:
    tag = tag + "_" + args.tag

assert args.stitch_logic in ['switch', 'condition'], '--stitch-logic=%s not understood' % args.stitch_logic

#-------------------------------------------------

if args.seed is not None:
    if args.verbose:
        print('setting seed=%d'%args.seed)
    np.random.seed(args.seed)

#-------------------------------------------------

if args.verbose:
    print('loading crust from : '+args.crust)
crust = np.genfromtxt(args.crust, names=True, delimiter=',')

baryon_density_crust = crust['baryon_density']

sel = baryon_density_crust >= args.crust_min_baryon_density

phi_crust = np.log(1./crust['cs2c2'][sel] - 1)
logpc2_crust = np.log(crust['pressurec2'][sel])
baryon_density_crust = baryon_density_crust[sel]

Ncrust = len(logpc2_crust)

#-------------------------------------------------

if args.verbose:
    print('constructing grid of reference %d pressures within (%.6e, %.6e) g/cm^3' % \
        (args.num_pressure_points, args.pressurec2_grid_range[0], args.pressurec2_grid_range[1]))

logpc2_test = np.linspace(*np.log(args.pressurec2_grid_range), args.num_pressure_points)

truth = (np.log(args.pressurec2_range[0]) <= logpc2_test) * (logpc2_test <= np.log(args.pressurec2_range[1]))
if args.verbose:
    print('retaining grid of %d points between (%.6e, %.6e) g/cm^3' % \
        (np.sum(truth), args.pressurec2_range[0], args.pressurec2_range[1]))

logpc2_test = logpc2_test[truth]
num_points = len(logpc2_test)

ones = np.ones(num_points, dtype=float)

#------------------------

for csv in args.csv:

    # load data

    if args.verbose:
        print('loading : '+csv)

    data = np.genfromtxt(csv, names=True, delimiter=',')

    logpc2 = np.log(data['pressurec2'])
    phi = data['phi']

    logpc2_min = np.log(data['minimum_pressurec2'])
    phi_min = data['minimum_phi']

    logpc2_max = np.log(data['maximum_pressurec2'])
    phi_max = data['maximum_phi']

    #---

    # construct model

    if args.verbose:
        print('    constructing Gaussian process model')

    phi_test = np.interp(logpc2_test, logpc2, phi) # just do linear interpolation
    phi_min_test = np.interp(logpc2_test, logpc2_min, phi_min)
    phi_max_test = np.interp(logpc2_test, logpc2_max, phi_max)

    # approximate marginal uncertainty based on spread of max and min
    stdv = (0.5*((phi_test - phi_min_test)**2 + (phi_test - phi_max_test)**2))**0.5
    stdv *= args.scale # inflate or deflate wiggles

    #---

    if args.stitch_logic == 'switch': # find the max density at which the crust and EFT band cross

        for ind in range(Ncrust):
            if phi_crust[Ncrust-1-ind] < np.interp(logpc2_crust[Ncrust-1-ind], logpc2, phi):
                break
        else:
            raise RuntimeError('could not find density at which crust and EFT mean cross')

        if args.verbose:
            print('''\
    switching to crust below log(pressurec2 [g/cm^3]) = %.3e
        pressurec2 = %.3e g/cm^3
        baryon_density ~ %.3e g/cm^3 = %.3f sat''' % \
                (logpc2_crust[Ncrust-1-ind],
                 np.exp(logpc2_crust[Ncrust-1-ind]),
                 baryon_density_crust[Ncrust-1-ind],
                 baryon_density_crust[Ncrust-1-ind]/2.8e14,
            ))

        logpc2_stitch = logpc2_crust[Ncrust-1-ind] ### trust the crust up to here, then switch to EFT mean

        # now actually stitch the crust onto the EFT band
        sel = logpc2_test < logpc2_stitch
        ect = np.logical_not(sel)

        phi_mean = np.concatenate((np.interp(logpc2_test[sel], logpc2_crust, phi_crust), phi_test[ect]))

        ### squeeze uncertainty below stitching point
        ect = sel * (logpc2_stitch - args.stitch_switch_delta_logpc2 < logpc2_test)
        stdv[ect] *= 0.5 * (1 + np.cos(np.pi*(logpc2_test[ect] - logpc2_stitch)/args.stitch_switch_delta_logpc2))
        s = stdv[ect][0]

        ect = sel * (logpc2_test <= logpc2_stitch - args.stitch_switch_delta_logpc2)
        stdv[ect] = s * (logpc2_test[ect]/(logpc2_stitch-args.stitch_switch_delta_logpc2))**args.stitch_switch_pow

    #---

    # construct funny-looking covariance matrix that builds in squared-exponential correlations in log(p/c2)

    ### basic outer product
    cov = np.outer(stdv, stdv)

    ### temper correlations with squared exponential roll-off
    ones = np.ones(num_points, dtype=float)
    cov *= np.exp(-(np.outer(logpc2_test, ones)-np.outer(ones, logpc2_test))**2 / args.correlation_length**2) 

    #---

    if args.stitch_logic == 'condition': # condition a process based on the full EFT band on the observed crust
                                         # do this after we've already made an initial process

        if args.verbose:
            print('''\
    conditioning on crust below log(pressurec2 [g/cm^3]) = %.3e
        pressurec2 = %.3e g/cm^3
        baryon_density ~ %.3e g/cm^3 = %.3f sat''' % \
                (logpc2_crust[-1],
                 np.exp(logpc2_crust[-1]),
                 baryon_density_crust[-1],
                 baryon_density_crust[-1]/2.8e14,
            ))

        # construct extra covariance matrices
        stdv_crust = np.interp(logpc2_crust, logpc2_test, stdv)
        ones_crust = np.ones(Ncrust, dtype=float)

        # covariance between crust points
        cov_crust_crust = np.outer(stdv_crust, stdv_crust)
        cov_crust_crust *= np.exp(-(np.outer(logpc2_crust, ones_crust) - np.outer(ones_crust, logpc2_crust))**2 / args.stitch_condition_correlation_length**2)
        cov_crust_crust += np.diag(ones_crust * args.stitch_condition_sigma**2)

        inv_cov_crust_crust = np.linalg.pinv(cov_crust_crust) # invert this only once

        # covariance between crust and test points
        cov_test_crust = np.outer(stdv, stdv_crust)
        cov_test_crust *= np.exp(-(np.outer(logpc2_test, ones_crust) - np.outer(ones, logpc2_crust))**2 / args.stitch_condition_correlation_length**2)

        # squeeze the uncertainty in the EFT bands at low densities so they will closely follow the crust

        logpc2_squeeze = np.log(args.stitch_condition_squeeze_pressurec2)

        scaling = np.where(
            logpc2_test <= logpc2_squeeze,
            (logpc2_test/logpc2_squeeze)**(args.stitch_condition_squeeze_pow/2),
            1.0,
        )
        cov *= np.outer(scaling, scaling)

        # now condition the process
        phi_mean = phi_test \
            + cov_test_crust @ inv_cov_crust_crust @ (phi_crust - np.interp(logpc2_crust, logpc2_test, phi_test))

        cov = cov - cov_test_crust @ inv_cov_crust_crust @ np.transpose(cov_test_crust)

    #---

    if args.plot: # draw a few examples and plot them
        if args.verbose:
            print('    plotting %d realizations' % args.num_draws)

        fig = plt.figure()
        ax = fig.add_axes([0.10, 0.10, 0.85, 0.85])

        # mean function, interpolated
        ax.plot(logpc2_test, phi_mean, color='k') 

        # marginal covariances
        sigma = np.diag(cov)**0.5
        ax.fill_between(logpc2_test, phi_mean-sigma, phi_mean+sigma, color='k', alpha=0.25)

        # plot realizations on top
        for draw in np.random.multivariate_normal(phi_mean, cov, size=args.num_draws):
            ax.plot(logpc2_test, draw, color='r', alpha=0.25, zorder=-10)

        # crust
        kwargs = dict(color='g', alpha=0.75, marker='.', markersize=1, linestyle='none')

        sel = (logpc2_crust >= 20) # put a reasonable bound on the plot
        ax.plot(logpc2_crust[sel], phi_crust[sel], **kwargs)

        # actual data
        kwargs = dict(color='c', alpha=0.75, marker='.', markersize=1, linestyle='none')

        ax.plot(logpc2_min, phi_min, **kwargs)

        ax.plot(logpc2_max, phi_max, **kwargs)

        kwargs = dict(color='b', alpha=0.75, marker='.', markersize=1, linestyle='none')
        ax.plot(logpc2, phi, **kwargs)

        # finish decorating
        ax.set_xlabel('log(pressurec2)')
        ax.set_ylabel('phi')

        ax.tick_params(
            left=True,
            right=True,
            top=True,
            bottom=True,
            direction='in',
            which='both',
        )

        png = os.path.join(args.output_dir, os.path.basename(csv)[:-4]+'_%s.png'%tag)
        if args.verbose:
            print('    saving : '+png)
        fig.savefig(png, dpi=500)
        plt.close(fig)

    #---

    # write to disk
    hdf = os.path.join(args.output_dir, os.path.basename(csv)[:-4] + '_%s.hdf'%tag)
    if args.verbose:
        print('    saving : '+hdf)

    with h5py.File(hdf, 'w') as obj:
        group = obj.create_group(os.path.basename(csv[:-4]))

        # these are actually meaningful
        group.attrs.create('correlation_length', args.correlation_length)
        group.attrs.create('scale', args.scale)

        # set dummy attributes to make this play nicely with old code...
        group.attrs.create('weight', 1.0)
        group.attrs.create('poly_degree', np.nan)
        group.attrs.create('sigma', np.nan)
        group.attrs.create('length_scale', np.nan)
        group.attrs.create('sigma_obs', np.nan)
        group.attrs.create('model_multiplier', np.nan)

        group.attrs.create('xlabel', 'log(pressurec2)')
        group.attrs.create('flabel', 'phi')

        # create dataset for mean function
        data = np.empty(num_points, dtype=[('log(pressurec2)', float), ('phi', float)])

        data['log(pressurec2)'] = logpc2_test

        data['phi'] = phi_mean

        group.create_dataset('mean', data=data)

        # create dataset for covariance
        group.create_dataset('cov', data=cov)
